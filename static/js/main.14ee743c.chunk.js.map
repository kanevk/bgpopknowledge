{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_BASE","process","VideoDetails","id","useParams","useState","transcript","setTranscript","displayedSubtitle","setDisplayedSubtitle","useEffect","a","fetch","resp","json","console","log","Error","opts","width","height","playerVars","autoplay","onStateChange","event","data","YouTube","PlayerState","PLAYING","currentTime","target","getCurrentTime","setTimeout","transcripts","filter","transcriptChunk","offset","i","setInterval","translatedText","PAUSED","videoId","style","display","justifyContent","alignContent","App","useRoutes","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAKMA,EAAWC,yDAIjB,IAaMC,EAAe,WAAO,IAClBC,EAAOC,cAAPD,GADiB,EAEWE,mBAKzB,MAPc,mBAElBC,EAFkB,KAENC,EAFM,OAQyBF,mBAAS,IARlC,mBAQlBG,EARkB,KAQCC,EARD,KA2CzB,GATAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,sEACoBC,MAAM,GAAD,OAAIZ,EAAJ,4BAAgCG,IADzD,cACOU,EADP,gBAE8BA,EAAKC,OAFnC,gBAESR,EAFT,EAESA,WACRC,EAAcD,GACdS,QAAQC,IAAIV,GAJb,0CAAD,KAMC,CAACH,KAECA,EAAI,MAAMc,MAAM,oBACrB,OAAKX,EAGH,gCACE,cAAC,IAAD,CACEY,KAAM,CAAEC,MAAO,OAAQC,OAAQ,QAASC,WAAY,CAAEC,SAAU,IAChEC,cAxC0B,SAACC,GAC/B,IAAKlB,EAAY,OAAO,KAExB,GAAIkB,EAAMC,OAASC,IAAQC,YAAYC,QAAS,CAC9C,IAAMC,EAAcL,EAAMM,OAAOC,iBACjCC,YAAW,WACT,IAAMC,EAAc3B,EAAW4B,QAC7B,SAACC,GAAD,OAAqBA,EAAgBC,OAAuB,IAAdP,KAG5CQ,EAAI,EACRC,aAAY,WAEQ,IADEd,EAAMM,OAAOC,kBACPE,EAAYI,GAAGD,SACvCrB,QAAQC,IAAIiB,EAAYI,GAAGE,gBAC3B9B,EAAqBwB,EAAYI,GAAGE,gBACpCF,GAAK,KAEN,MACF,QACMb,EAAMC,KAASC,IAAQC,YAAYa,QAqB1CC,QAAStC,IAEX,qBAAKuC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,SACE,oBAAIF,MAAO,CAAEG,aAAc,UAA3B,SAAwCrC,SAVtB,8CAgBXsC,EAzEH,WACV,OAAOC,YAAU,CACf,CACEC,KAAM,aACNC,QAAS,cAAC,EAAD,KAEX,CACED,KAAM,IACNC,QAAS,0CCHAC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14ee743c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, useRoutes } from \"react-router\";\nimport YouTube from \"react-youtube\";\nimport \"./App.css\";\n\nconst API_BASE = process.env.REACT_APP_API_BASE;\n\nif (!API_BASE) throw Error(\"Provide value for API_BASE\");\n\nconst App = () => {\n  return useRoutes([\n    {\n      path: \"/video/:id\",\n      element: <VideoDetails />,\n    },\n    {\n      path: \"*\",\n      element: <div>404</div>,\n    },\n  ]);\n}\n\nconst VideoDetails = () => {\n  const { id } = useParams();\n  const [transcript, setTranscript] = useState<Array<{\n    text: string;\n    duration: number;\n    offset: number;\n    translatedText: string;\n  }> | null>(null);\n  const [displayedSubtitle, setDisplayedSubtitle] = useState(\"\");\n\n  const handlePlayerStateChange = (event: { target: any; data: number }) => {\n    if (!transcript) return null;\n\n    if (event.data === YouTube.PlayerState.PLAYING) {\n      const currentTime = event.target.getCurrentTime();\n      setTimeout(() => {\n        const transcripts = transcript.filter(\n          (transcriptChunk) => transcriptChunk.offset > currentTime * 1000,\n        );\n\n        var i = 0;\n        setInterval(() => {\n          const currentTime = event.target.getCurrentTime();\n          if (currentTime * 1000 >= transcripts[i].offset) {\n            console.log(transcripts[i].translatedText);\n            setDisplayedSubtitle(transcripts[i].translatedText);\n            i += 1;\n          }\n        }, 10);\n      }, 0);\n    } else if (event.data === YouTube.PlayerState.PAUSED) {\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch(`${API_BASE}/yt/transcript/v/${id}`);\n      const { transcript } = await resp.json();\n      setTranscript(transcript);\n      console.log(transcript);\n    })();\n  }, [id]);\n\n  if (!id) throw Error(\"Missing video ID\");\n  if (!transcript) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <YouTube\n        opts={{ width: \"100%\", height: \"500px\", playerVars: { autoplay: 0 } }}\n        onStateChange={handlePlayerStateChange}\n        videoId={id}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <h1 style={{ alignContent: \"center\" }}>{displayedSubtitle}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}